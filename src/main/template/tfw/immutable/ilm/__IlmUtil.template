// booleanilm,byteilm,charilm,doubleilm,floatilm,intilm,longilm,shortilm
package %%PACKAGE%%;

import java.io.IOException;
import tfw.check.Argument;

public final class %%NAME%%IlmUtil {
    private %%NAME%%IlmUtil() {}

    public static %%TYPE%%[] toArray(final %%NAME%%Ilm %%TYPE%%Ilm) throws IOException {
        Argument.assertNotGreaterThan(%%TYPE%%Ilm.width(), Integer.MAX_VALUE, "width()", "native array size");
        Argument.assertNotGreaterThan(%%TYPE%%Ilm.height(), Integer.MAX_VALUE, "height()", "native array size");

        return toArray(%%TYPE%%Ilm, 0, 0, (int) %%TYPE%%Ilm.height(), (int) %%TYPE%%Ilm.width());
    }

    public static %%TYPE%%[] toArray(
            final %%NAME%%Ilm %%TYPE%%Ilm, final long rowStart, final long columnStart, final int rowCount, int colCount)
            throws IOException {
        Argument.assertNotLessThan(rowCount, 0, "rowCount");
        Argument.assertNotLessThan(colCount, 0, "colCount");

        %%TYPE%%[] result = new %%TYPE%%[rowCount * colCount];

        %%TYPE%%Ilm.get(result, 0, rowStart, columnStart, rowCount, colCount);

        return result;
    }
}

// booleanilm,byteilm,charilm,doubleilm,floatilm,intilm,longilm,objectilm,shortilm
package %%PACKAGE%%;

import java.io.IOException;
import tfw.check.Argument;
import tfw.immutable.ilm.AbstractIlm;

public abstract class Abstract%%NAME%%Ilm%%TEMPLATE%% extends AbstractIlm implements %%NAME%%Ilm%%TEMPLATE%% {
    protected abstract void toArrayImpl(
            final %%TYPE_OR_TEMPLATE%%[] array, final int offset, long rowStart, long colStart, int rowCount, int colCount)
            throws IOException;

    protected Abstract%%NAME%%Ilm(long width, long height) {
        super(width, height);
    }

    public final void toArray(%%TYPE_OR_TEMPLATE%%[] array, int offset, long rowStart, long colStart, int rowCount, int colCount)
            throws IOException {
        Argument.assertNotNull(array, "array");

        if (width == 0 || height == 0 || array.length == 0) {
            return;
        }

        boundsCheck(array.length, offset, rowStart, colStart, rowCount, colCount);
        toArrayImpl(array, offset, rowStart, colStart, rowCount, colCount);
    }
}

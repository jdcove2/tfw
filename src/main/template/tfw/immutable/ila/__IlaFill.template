// booleanila,byteila,charila,doubleila,floatila,intila,longila,objectila,shortila
package %%PACKAGE%%;

import tfw.check.Argument;

public final class %%NAME%%IlaFill {
    private %%NAME%%IlaFill() {
        // non-instantiable class
    }

    public static %%TEMPLATE_SPACE%%%%NAME%%Ila%%TEMPLATE%% create(%%TYPE_OR_TEMPLATE%% value, long length) {
        Argument.assertNotLessThan(length, 0, "length");

        return new My%%NAME%%Ila%%DIAMOND%%(value, length);
    }

    private static class My%%NAME%%Ila%%TEMPLATE%% extends Abstract%%NAME%%Ila%%TEMPLATE%% {
        private final %%TYPE_OR_TEMPLATE%% value;

        My%%NAME%%Ila(%%TYPE_OR_TEMPLATE%% value, long length) {
            super(length);
            this.value = value;
        }

        protected void toArrayImpl(%%TYPE_OR_TEMPLATE%%[] array, int offset, int stride, long start, int length) {
            final int startPlusLength = (int) (start + length);
            for (int startInt = (int) start; startInt != startPlusLength; ++startInt, offset += stride) {
                array[offset] = value;
            }
        }
    }
}

// booleanila,byteila,charila,doubleila,floatila,intila,longila,objectila,shortila
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.DataInvalidException;
import tfw.immutable.ila.AbstractIlaCheck;

public final class %%NAME%%IlaFiltered%%TEMPLATE%% {
    private %%NAME%%IlaFiltered() {
        // non-instantiable class
    }

    public interface %%NAME%%Filter%%TEMPLATE%% {
        boolean matches(%%TYPE_OR_TEMPLATE%% value);
    }

    public static %%TEMPLATE_SPACE%%%%NAME%%Ila%%TEMPLATE%% create(%%NAME%%Ila%%TEMPLATE%% ila, %%NAME%%Filter%%TEMPLATE%% filter, %%TYPE_OR_TEMPLATE%%[] buffer) {
        Argument.assertNotNull(ila, "ila");
        Argument.assertNotNull(filter, "filter");
        Argument.assertNotNull(buffer, "buffer");

        return new My%%NAME%%Ila%%DIAMOND%%(ila, filter, buffer);
    }

    private static class My%%NAME%%Ila%%TEMPLATE%% implements %%NAME%%Ila%%TEMPLATE%% {
        private final %%NAME%%Ila%%TEMPLATE%% ila;
        private final %%NAME%%Filter%%TEMPLATE%% filter;
        private final %%TYPE_OR_TEMPLATE%%[] buffer;

        private long length = -1;

        private My%%NAME%%Ila(%%NAME%%Ila%%TEMPLATE%% ila, %%NAME%%Filter%%TEMPLATE%% filter, %%TYPE_OR_TEMPLATE%%[] buffer) {
            this.ila = ila;
            this.filter = filter;
            this.buffer = buffer;
        }

        public final long length() {
            calculateLength();

            return length;
        }

        public final void toArray(%%TYPE_OR_TEMPLATE%%[] array, int offset, long start, int length) throws DataInvalidException {
            calculateLength();

            if (length == 0) {
                return;
            }

            AbstractIlaCheck.boundsCheck(this.length, array.length, offset, start, length);

            %%NAME%%IlaIterator%%TEMPLATE%% oii = new %%NAME%%IlaIterator%%DIAMOND%%(%%NAME%%IlaSegment.create(ila, start), buffer.clone());

            // left off here
            for (int i = offset; oii.hasNext(); i++) {
                %%TYPE_OR_TEMPLATE%% node = oii.next();

                if (!filter.matches(node)) {
                    array[i] = node;
                }
            }
        }

        private void calculateLength() {
            if (length < 0) {
                length = ila.length();
                %%NAME%%IlaIterator%%TEMPLATE%% oii = new %%NAME%%IlaIterator%%DIAMOND%%(ila, buffer.clone());

                try {
                    while (oii.hasNext()) {
                        if (filter.matches(oii.next())) {
                            length--;
                        }
                    }
                } catch (DataInvalidException die) {
                    length = 0;
                }
            }
        }
    }
}

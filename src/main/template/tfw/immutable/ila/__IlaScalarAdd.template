// byteila,charila,doubleila,floatila,intila,longila,shortila
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.DataInvalidException;

public final class %%NAME%%IlaScalarAdd {
    private %%NAME%%IlaScalarAdd() {
        // non-instantiable class
    }

    public static %%NAME%%Ila create(%%NAME%%Ila ila, %%TYPE%% scalar) {
        Argument.assertNotNull(ila, "ila");

        return new My%%NAME%%Ila(ila, scalar);
    }

    private static class My%%NAME%%Ila extends Abstract%%NAME%%Ila {
        private final %%NAME%%Ila ila;
        private final %%TYPE%% scalar;

        My%%NAME%%Ila(%%NAME%%Ila ila, %%TYPE%% scalar) {
            super(ila.length());

            this.ila = ila;
            this.scalar = scalar;
        }

        protected void toArrayImpl(%%TYPE%%[] array, int offset, long start, int length) throws DataInvalidException {
            ila.toArray(array, offset, start, length);

            for (int ii = offset; length > 0; ii++, --length) {
                array[ii] += scalar;
            }
        }
    }
}

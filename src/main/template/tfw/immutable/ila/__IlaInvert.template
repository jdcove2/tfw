// doubleila,floatila
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.DataInvalidException;

/**
 *
 * @immutables.types=floating
 */
public final class %%NAME%%IlaInvert {
    private %%NAME%%IlaInvert() {
        // non-instantiable class
    }

    public static %%NAME%%Ila create(%%NAME%%Ila ila) {
        Argument.assertNotNull(ila, "ila");

        return new My%%NAME%%Ila(ila);
    }

    private static class My%%NAME%%Ila extends Abstract%%NAME%%Ila {
        private final %%NAME%%Ila ila;

        My%%NAME%%Ila(%%NAME%%Ila ila) {
            super(ila.length());

            this.ila = ila;
        }

        protected void toArrayImpl(%%TYPE%%[] array, int offset, int stride, long start, int length)
                throws DataInvalidException {
            ila.toArray(array, offset, stride, start, length);

            for (int ii = offset; length > 0; ii += stride, --length) {
                array[ii] = (%%TYPE%%) 1 / array[ii];
            }
        }
    }
}

// byteila,charila,doubleila,floatila,intila,longila,shortila
package %%PACKAGE%%;

import tfw.check.Argument;
import tfw.immutable.DataInvalidException;

public final class %%NAME%%IlaAdd {
    private %%NAME%%IlaAdd() {
        // non-instantiable class
    }

    public static %%NAME%%Ila create(%%NAME%%Ila leftIla, %%NAME%%Ila rightIla, int bufferSize) {
        Argument.assertNotNull(leftIla, "leftIla");
        Argument.assertNotNull(rightIla, "rightIla");
        Argument.assertEquals(leftIla.length(), rightIla.length(), "leftIla.length()", "rightIla.length()");
        Argument.assertNotLessThan(bufferSize, 1, "bufferSize");

        return new My%%NAME%%Ila(leftIla, rightIla, bufferSize);
    }

    private static class My%%NAME%%Ila extends Abstract%%NAME%%Ila {
        private final %%NAME%%Ila leftIla;
        private final %%NAME%%Ila rightIla;
        private final int bufferSize;

        My%%NAME%%Ila(%%NAME%%Ila leftIla, %%NAME%%Ila rightIla, int bufferSize) {
            super(leftIla.length());

            this.leftIla = leftIla;
            this.rightIla = rightIla;
            this.bufferSize = bufferSize;
        }

        protected void toArrayImpl(%%TYPE%%[] array, int offset, long ilaStart, int length) throws DataInvalidException {
            %%NAME%%IlaIterator li =
                    new %%NAME%%IlaIterator(%%NAME%%IlaSegment.create(leftIla, ilaStart, length), new %%TYPE%%[bufferSize]);
            %%NAME%%IlaIterator ri =
                    new %%NAME%%IlaIterator(%%NAME%%IlaSegment.create(rightIla, ilaStart, length), new %%TYPE%%[bufferSize]);

            for (int ii = offset; length > 0; ii++, --length) {
                array[ii] = %%CAST_FROM_INT_PRE%%li.next() + ri.next()%%CAST_FROM_INT_POST%%;
            }
        }
    }
}

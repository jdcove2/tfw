// byteila,charila,doubleila,floatila,intila,longila,shortila
package %%PACKAGE%%;

import tfw.check.Argument;

/**
 *
 * @immutables.types=numeric
 */
public final class %%NAME%%IlaRamp {
    private %%NAME%%IlaRamp() {
        // non-instantiable class
    }

    public static %%NAME%%Ila create(%%TYPE%% startValue, %%TYPE%% increment, long length) {
        Argument.assertNotLessThan(length, 0, "length");

        return new My%%NAME%%Ila(startValue, increment, length);
    }

    private static class My%%NAME%%Ila extends Abstract%%NAME%%Ila {
        private final %%TYPE%% startValue;
        private final %%TYPE%% increment;

        My%%NAME%%Ila(%%TYPE%% startValue, %%TYPE%% increment, long length) {
            super(length);
            this.startValue = startValue;
            this.increment = increment;
        }

        protected void toArrayImpl(%%TYPE%%[] array, int offset, int stride, long start, int length) {
            final int startPlusLength = (int) (start + length);

            // CORRECT, BUT WAY TOO SLOW
            // %%TYPE%% value = startValue;
            // for(long ii = 0; ii < start; ++ii)
            // {
            //    value += increment;
            // }

            // INCORRECT, BUT FAST
            %%TYPE%% value = (%%TYPE%%) (startValue + increment * start);
            for (int startInt = (int) start;
                    startInt != startPlusLength;
                    ++startInt, offset += stride, value += increment) {
                array[offset] = value;
            }
        }
    }
}

// booleanila,byteila,charila,doubleila,floatila,intila,longila,objectila,shortila
package %%PACKAGE%%;

import static org.junit.jupiter.api.Assertions.assertThrows;

%%RANDOM_INCLUDE%%import org.junit.jupiter.api.Test;
import tfw.immutable.ila.IlaTestDimensions;

class %%NAME%%IlaInterleaveTest {
    @Test%%SUPPRESS%%
    void testArguments() throws Exception {
        final %%NAME%%Ila%%TEMPLATE%% ila1 = %%NAME%%IlaFromArray.create(new %%TYPE%%[10]);
        final %%NAME%%Ila%%TEMPLATE%% ila2 = %%NAME%%IlaFromArray.create(new %%TYPE%%[20]);
        final %%NAME%%Ila%%TEMPLATE%%[] ilas1 = %%FULL_CAST%%new %%NAME%%Ila[] {};
        final %%NAME%%Ila%%TEMPLATE%%[] ilas2 = %%FULL_CAST%%new %%NAME%%Ila[] {null, null};
        final %%NAME%%Ila%%TEMPLATE%%[] ilas3 = %%FULL_CAST%%new %%NAME%%Ila[] {null, ila1};
        final %%NAME%%Ila%%TEMPLATE%%[] ilas4 = %%FULL_CAST%%new %%NAME%%Ila[] {ila1, null};
        final %%NAME%%Ila%%TEMPLATE%%[] ilas5 = %%FULL_CAST%%new %%NAME%%Ila[] {ila1, ila1};
        final %%NAME%%Ila%%TEMPLATE%%[] ilas6 = %%FULL_CAST%%new %%NAME%%Ila[] {ila1, ila2};
        final %%TYPE%%[] buffer = new %%TYPE%%[10];

        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(null, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas5, null));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas1, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas2, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas3, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas4, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaInterleave.create(ilas6, buffer));
    }

    @Test%%SUPPRESS%%
    void testAll() throws Exception {
        %%RANDOM_INIT%%final int length = IlaTestDimensions.defaultIlaLength();
        for (int jj = 2; jj < 6; ++jj) {
            final %%TYPE%%[][] target = new %%TYPE%%[jj][length];
            final %%TYPE%%[] array = new %%TYPE%%[jj * length];
            for (int ii = 0; ii < jj * length; ++ii) {
                array[ii] = target[ii % jj][ii / jj] = %%RANDOM_VALUE%%;
            }
            %%NAME%%Ila%%TEMPLATE%%[] ilas = %%FULL_CAST%%new %%NAME%%Ila[jj];
            for (int ii = 0; ii < jj; ++ii) {
                ilas[ii] = %%NAME%%IlaFromArray.create(target[ii]);
            }
            %%NAME%%Ila%%TEMPLATE%% targetIla = %%NAME%%IlaFromArray.create(array);
            %%NAME%%Ila%%TEMPLATE%% actualIla = %%NAME%%IlaInterleave.create(ilas, new %%TYPE%%[1000]);
            final %%TYPE%% epsilon = %%DEFAULT_VALUE%%;
            %%NAME%%IlaCheck.checkAll(
                    targetIla,
                    actualIla,
                    IlaTestDimensions.defaultOffsetLength(),
                    IlaTestDimensions.defaultMaxStride(),
                    epsilon);
        }
    }
}

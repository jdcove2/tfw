// booleanila,byteila,charila,doubleila,floatila,intila,longila,objectila,shortila
package %%PACKAGE%%;

import static org.junit.jupiter.api.Assertions.assertThrows;

%%RANDOM_INCLUDE%%import org.junit.jupiter.api.Test;
import tfw.immutable.ila.IlaTestDimensions;

class %%NAME%%IlaDecimateTest {
    @Test
    void testArguments() {
        final %%NAME%%Ila ila = %%NAME%%IlaFromArray.create(new %%TYPE%%[10]);
        final %%TYPE%%[] buffer = new %%TYPE%%[10];

        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaDecimate.create(null, 2, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaDecimate.create(ila, 2, null));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaDecimate.create(ila, 1, buffer));
        assertThrows(IllegalArgumentException.class, () -> %%NAME%%IlaDecimate.create(ila, 2, new %%TYPE%%[0]));
    }

    @Test
    void testAll() throws Exception {
        %%RANDOM_INIT%%final int length = IlaTestDimensions.defaultIlaLength();
        final %%TYPE%%[] array = new %%TYPE%%[length];
        for (int ii = 0; ii < array.length; ++ii) {
            array[ii] = %%RANDOM_VALUE%%;
        }
        %%NAME%%Ila%%TEMPLATE%% ila = %%NAME%%IlaFromArray.create(array);
        for (int factor = 2; factor <= length; ++factor) {
            final int targetLength = (length + factor - 1) / factor;
            final %%TYPE%%[] target = new %%TYPE%%[targetLength];
            for (int ii = 0; ii < target.length; ++ii) {
                target[ii] = array[ii * factor];
            }
            %%NAME%%Ila%%TEMPLATE%% targetIla = %%NAME%%IlaFromArray.create(target);
            %%NAME%%Ila%%TEMPLATE%% actualIla = %%NAME%%IlaDecimate.create(ila, factor, new %%TYPE%%[100]);
            final %%TYPE%% epsilon = %%DEFAULT_VALUE%%;
            %%NAME%%IlaCheck.checkAll(
                    targetIla,
                    actualIla,
                    IlaTestDimensions.defaultOffsetLength(),
                    IlaTestDimensions.defaultMaxStride(),
                    epsilon);
        }
    }
}
